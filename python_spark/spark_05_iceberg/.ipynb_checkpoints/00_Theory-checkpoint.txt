https://www.youtube.com/watch?v=MSuT20EqnnM&list=PLGJYVkmdOAFGFUJprl21d5DUK4XMBDW_F

Broblem: i have many files in the data lake but these files are grouped logically and describe the data of a table

Old solution: Hive, this folder represent a table, all the files under the folder are part of the table, partition the data to subfolders
                    
              Pros:
                    file format agnostic
                    partition skipping
                    atomically update a whole partition
                    central place for the other ecosystem

             Cons:
                    small updates are inefficient (smaller unit is partition)
                    not safely change data to multiple partitions (update partition one-by-one)
                    directories listing of large tables is slow
                    users should know the physical layer of the table (partition logic, folders structure)
                    stale table statistics (read every file, generate stats..)


New Solution: Iceberg table format

            Efficient smaller updates: changes at file elevel
            Snapshot isolation for transactions: write is atomic, read does not block write
            Faster planing and execution: listing of files is defined on write side, column stats are maintained 
            Abstruct the physical structure of the table
            Schema evelve


            ACID Transactions
            Time travel
            Partition evolution
            Schema evolution
            Hidden partitions
            Support parquet, orc, avro


Iceberg architecture:

        Iceberg catalog: what tables exists, the current metadata pointer for each table
            medatata files: schema, partitions, location 
                Manifest list: on each update a new snapshot is generated, each update associated with a group of manifest files
                    Manifest files
                        data files: actual data

        Metadata file:
            table id
            location
            schema
            partition
            snaphots[
                current manifest
                previous manifest
            ]

        Manifest list: list of manifest (path, snapshot referense, partitions)
        Manifest file:
                file path
                file format
                partition
                record-count
                stats (# nulls, min, max.) for each column


Copy-on-write: default, on an update or delete a new version of file
Merge-on-read: make the write faster, on an update or delete a new file will created with the rows affected
               when the table will be readed it will merge the two files and create the current state  (cost on read side)


Tpye of deletes:

        Position delete: when deleting a record, it is storing from "<which file> <row number in file>"
                          abs.parquet 0
                          abs.parquet 3

        Equality Deletes: when deleting a record, store the predicates that affect the records
                            ]: id
                             ----
                                0
                                3

        table properties: default copy-on-write
                write.update.mode
                write.delete.mode
                write.merge.mode